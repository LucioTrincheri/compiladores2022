#
# Archivo utilizado como borrador para testear casos.
# Lo dejamos a modo recuerdo.
#

#let hola = (let x:Nat = 2 in 3 )+ 1
#let ifzConResta = print "asdasd" (ifz (2 - 1) then 1 else 2)
#let ifzConResta2 = print "asdasd" (ifz (2 - 1) then (print "hola" 1) else (print "hola" 2))

#let suma = 1 + 1 + 1
#let sumaYResta = 1 + 1 - 10
#let sumaYRestaconPrint = 1 + 1 - (print "adasg" 1)
#let letTest = let x:Nat = 3 in x + 1
#let lamtest = (fun x:Nat -> 3) 2
#let ieTest = let (x:Nat->Nat) = fun (y:Nat) -> y + (1 + 1 + (1 + 1 + 1)) + 1 + (1 + 1 + 1) + 1 + 1 in x (x (x 2))


#let ggg (x:Nat) (f : Nat -> Nat) : Nat =
#  let x :Nat = (print "" 1) in
#  2

#let ggg2 (x:Nat) (f : Nat -> Nat) : Nat -> Nat =
#  let x :Nat = print "" (x+x+x+x+x+x) in
#  (fun (y:Nat) -> x+y)

  
#let banana = (fun (y:Nat->Nat) -> print "" (y 1)) (fun (x:Nat) -> x + 1)
#let banana = let a:Nat = 2 in let b:Nat = 2 in (fun (x:Nat) -> print "" (x + a + b))  2
#let banana = let a:Nat = 2
#                    in let f (y:Nat):Nat =
#                    let b:Nat = 4 in
#                    let g (z:Nat):Nat = z + a + b
#                    in y + g 5
#                    in print "" (f 3)

#let f (x:Nat) : Nat -> Nat = fun (y:Nat) -> x+y
#let mult = fix(mul: Nat->Nat->Nat)(m : Nat) -> fun(n : Nat) -> ifz n then 0 else (ifz n - 1 then m else m + (mul m (n - 1)))

#let rec factaz (m:Nat):Nat = ifz m then 1 else mult m (factaz (m - 1))

#let testMult = print "" (factaz 5)

#let ack = fix (ackm:Nat->Nat->Nat) (m:Nat) (n:Nat) -> ifz m then (n+1) else (ifz n then (ackm (m-1) 1) else (ackm (m-1) (ackm m (n-1))))

#let testAck = print "Ackermann 2 5 = " (ack 3 11)

#Tests de ejercicio 1 y declaraciones sin azucar sintactico.
#let resta = fun(a:Nat) -> 
#                fun(b:Nat) ->
#                    a - b

#let a = print "asdfasdfasdf" (resta 2000 1000)

#let mult = fix(mul: Nat->Nat->Nat)(m : Nat) -> fun(n : Nat) -> ifz n then 0 else (ifz n - 1 then m else m + (mul m (n - 1)))

#let TestIfz = print "ifz 0 = " (ifz 0 then (1 + 5) else 1)
#let TestIfz2 = print "ifz 0 = " (ifz 0 then TestIfz else 1)

#let TestMult = print "mult 25 10 = " (mult 25 10)

#let h = fun (x y:Nat) -> x + y
#let g = fun (x :Nat) -> h x 1
#let f = fun (x :Nat) -> 1 + (g x)
let x = 
  let x : Nat = 1 in
  let x : Nat = x + x in
  let x : Nat = x + x in
  let x : Nat = x + x in
  let x : Nat = x + x in
  let x : Nat = x + x in
  let x : Nat = x + x in
  let x : Nat = x + x in
  let x : Nat = x + x in
  let x : Nat = x + x in
  let x : Nat = x + x in
  let x : Nat = x + x in
  let x : Nat = x + x in
  let x : Nat = x + x in
  let x : Nat = x + x in
  let x : Nat = x + x in
  let x : Nat = x + x in
  let x : Nat = x + x in
  let x : Nat = x + x in
  let x : Nat = x + x in
  let x : Nat = x + x in
  x
